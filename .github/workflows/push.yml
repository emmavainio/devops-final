name: Push workflow, tests, deploy to prod if master

on:   
  push:
    branches:
      - '*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TAG_NAME: ${{ github.ref_name }}

jobs:        
  build-upload-artifact:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: Make Gradle Wrapper script executable
      run: chmod +x ./gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v3
      with:
        name: jar
        path: build/libs/devops-final-0.0.1-SNAPSHOT.jar
  
  unit-and-coverage-test:
    runs-on: ubuntu-latest
    needs: build-upload-artifact
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Make Gradle Wrapper script executable
      run: chmod +x ./gradlew
    - name: Run Unit Test
      run: ./gradlew test
    - name: Upload JaCoCo Report
      uses: actions/upload-artifact@v3
      with:
        name: JaCoCo
        path: build/reports/jacoco/test/html/index.html

  integration-test:
    runs-on: ubuntu-latest
    needs: unit-and-coverage-test
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Make Gradle Wrapper script executable
      run: chmod +x ./gradlew
    - name: Run Integration Tests
      run: ./gradlew integrationTest

  system-test:
    if: github.ref == 'refs/heads/master'
    needs: integration-test
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Make Gradle Wrapper script executable
      run: chmod +x ./gradlew

    - name: download artifact
      uses: actions/download-artifact@v3
      with:
        name: jar

    - name: Run jar
      run: java -jar devops-final-0.0.1-SNAPSHOT.jar &
      
    - name: Run System Test
      run: ./gradlew systemTest

  build-and-push-image:
    if: github.ref == 'refs/heads/master'
    needs: [build-upload-artifact, unit-and-coverage-test, integration-test, system-test]
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
  
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
        
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: Make Gradle Wrapper script executable
      run: chmod +x ./gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
    
    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        labels: ${{ steps.meta.outputs.labels }}
  
  fake-deploy-prod:
    if: github.ref == 'refs/heads/master'
    needs: build-and-push-image
    runs-on: ubuntu-latest
    steps:
        - name: echo deploy
          run: |
            echo "Deploying to prod: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }}"
