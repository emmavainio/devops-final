plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco'
    id 'checkstyle'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

jacoco {
    toolVersion = '0.8.10'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:rest-assured:5.3.2'
}

sourceSets {

    integrationTest {
        java.srcDir file('src/integrationTest/java')
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }

    systemTest {
        java.srcDir file('src/systemTest/java')
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    systemTestImplementation.extendsFrom testImplementation
    systemTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    mustRunAfter test
    useJUnitPlatform()
    testLogging {
        events "PASSED","FAILED","SKIPPED"
    }
}

task systemTest(type: Test) {
    testClassesDirs = sourceSets.systemTest.output.classesDirs
    classpath = sourceSets.systemTest.runtimeClasspath
    mustRunAfter test
    useJUnitPlatform()
    testLogging {
        events "PASSED","FAILED","SKIPPED"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

checkstyle {
    toolVersion = '10.12.4'
    maxWarnings = 10
    showViolations = true
    configFile = file("${project.rootDir}/config/checkstyle/google_checks.xml")
    reportsDir = file("${project.buildDir}/checkstyle")
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
    }
}